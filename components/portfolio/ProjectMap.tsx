// Copyright (c) 2025 Devin Hunt contact@devinhunt.com
// components/portfolio/ProjectMap.tsx
// This was generated by Claude Sonnet 3.5, with the assistance of my human mentor
// Mapping projects like a hydrologist maps watersheds - with precision and care!

'use client';

import React, { useEffect, useRef, useState } from 'react';
import maplibregl, { MapMouseEvent, MapGeoJSONFeature } from 'maplibre-gl';
import 'maplibre-gl/dist/maplibre-gl.css';

/**
 * ProjectMap props interface
 * @interface
 * @property {string} projectId - Identifier for the project to display
 */
interface ProjectMapProps {
  projectId: string;
}

/**
 * Map configuration for each project
 */
const PROJECT_MAPS: Record<string, any> = {
  'prison-ej': {
    center: [-95.5795, 39.8283], // Center of US
    zoom: 2.7,
    style: 'https://tiles.openfreemap.org/styles/liberty',
    maxBounds: [
      [-167.276413, 15.875834], // Southwest coordinates
      [-52.233040, 72.553967]   // Northeast coordinates
    ] as maplibregl.LngLatBoundsLike,
    geojsonPath: '/data/final_df_2023-08-31.geojson',
    pointsPath: '/data/centroids_2023-08-31.geojson',
  },
  'cuyama-basin': {
    center: [-119.630, 34.9220], // Cuyama Valley, CA
    zoom: 8,
    style: 'https://tiles.openfreemap.org/styles/liberty',
    geojsonPath: '/data/cuyama_subbasin.geojson',
    dataLayer: {
      id: 'groundwater-basins',
      type: 'fill',
      color: '#7a8082',
      outlineColor: '#000000',
      opacity: 0.4
    }
  },
  'yuba-recharge': {
    center: [-121.520, 39.120], // Yuba County, CA
    zoom: 8.5,
    style: 'https://tiles.openfreemap.org/styles/liberty',
    geojsonPath: '/data/yuba_subbasins.geojson',
    dataLayer: {
      id: 'recharge-suitability',
      type: 'fill',
      color: '#7a8082',
      outlineColor: '#000000',
      opacity: 0.4
    }
  },
  'yuba-gsp': {
    center: [-121.520, 39.120], // Yuba County, CA
    zoom: 8.5,
    style: 'https://tiles.openfreemap.org/styles/liberty',
    geojsonPath: '/data/yuba_subbasins.geojson',
    dataLayer: {
      id: 'recharge-suitability',
      type: 'fill',
      color: '#7a8082',
      outlineColor: '#000000',
      opacity: 0.4
    }
  }
};

// Get the display name for the selected attribute for prison map
const getAttributeLabel = (attr: string) => {
  switch(attr) {
    case "fnl_rs_": return "Overall Risk Score";
    case "clmt_sc": return "Climate Risk";
    case "expsr_s": return "Exposure Risk";
    case "effcts_": return "Effects Risk";
    default: return "Risk Score";
  }
};

/**
 * Interface for prison GeoJSON feature properties
 */
interface PrisonFeature {
  type: "Feature"
  geometry: {
    type: "Polygon"
    coordinates: number[][][]
  }
  properties: {
    NAME: string
    CITY: string
    STATE: string
    fnl_rs_: number
    clmt_sc: number
    expsr_s: number
    effcts_: number
    [key: string]: any
  }
}

/**
 * Component for displaying an interactive map for a portfolio project
 * @param {ProjectMapProps} props - Component props
 * @returns {React.JSX.Element} Interactive map for the project
 */
const ProjectMap: React.FC<ProjectMapProps> = ({ projectId }) => {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<maplibregl.Map | null>(null);
  const popup = useRef<maplibregl.Popup | null>(null);
  const [selectedAttribute, setSelectedAttribute] = useState<string>("fnl_rs_");
  
  // Shared function to set up popup handlers for prison map
  const setupPrisonPopupHandlers = () => {
    if (!map.current) return;

    // Remove old popup and event listeners
    if (popup.current) {
      popup.current.remove();
    }
    // Clean up polygon event listeners
    map.current.off("mouseenter", "prison-polygons" as any);
    map.current.off("mouseleave", "prison-polygons" as any);
    
    // Clean up point event listeners
    map.current.off("mouseenter", "prison-centroids" as any);
    map.current.off("mouseleave", "prison-centroids" as any);
    map.current.off("mouseenter", "prison-symbol-layer" as any);
    map.current.off("mouseleave", "prison-symbol-layer" as any);

    // Create new popup
    popup.current = new maplibregl.Popup({
      closeButton: false,
      closeOnClick: false,
    });

    // Handler function for both polygons and points
    const handleMouseEnter = (e: MapMouseEvent & { features?: MapGeoJSONFeature[] }, isPoint: boolean) => {
      if (!map.current || !popup.current || !e.features?.[0]) return;

      const feature = e.features[0] as unknown as PrisonFeature;
      const properties = feature.properties;
      let popupLngLat;
      
      if (isPoint) {
        // For points, use the point coordinates directly
        popupLngLat = e.lngLat;
      } else {
        // For polygons, calculate the centroid
        const bounds = new maplibregl.LngLatBounds();
        feature.geometry.coordinates[0].forEach((coord) => {
          bounds.extend(coord as [number, number]);
        });
        popupLngLat = bounds.getCenter();
      }

      const description = `
        <strong>${properties.NAME}</strong><br/>
        ${properties.CITY}, ${properties.STATE}<br/>
        ${getAttributeLabel(selectedAttribute)}: ${Math.round(properties[selectedAttribute])}
      `;

      popup.current.setLngLat(popupLngLat).setHTML(description).addTo(map.current);
    };

    // Add event listeners for polygons
    map.current.on("mouseenter", "prison-polygons" as any, (e) => handleMouseEnter(e, false));
    map.current.on("mouseleave", "prison-polygons" as any, () => {
      if (popup.current) popup.current.remove();
    });
    
    // Add event listeners for circle points
    map.current.on("mouseenter", "prison-centroids" as any, (e) => handleMouseEnter(e, true));
    map.current.on("mouseleave", "prison-centroids" as any, () => {
      if (popup.current) popup.current.remove();
    });
    
    // Add event listeners for symbol points
    map.current.on("mouseenter", "prison-symbol-layer" as any, (e) => handleMouseEnter(e, true));
    map.current.on("mouseleave", "prison-symbol-layer" as any, () => {
      if (popup.current) popup.current.remove();
    });
  };
  
  useEffect(() => {
    if (!mapContainer.current) return;
    
    const mapConfig = PROJECT_MAPS[projectId] || PROJECT_MAPS['prison-ej']; // Default to first project
    
    map.current = new maplibregl.Map({
      container: mapContainer.current,
      style: mapConfig.style,
      center: mapConfig.center,
      zoom: mapConfig.zoom,
      attributionControl: false,
      maxBounds: mapConfig.maxBounds || undefined
    });
    
    // Add navigation controls
    map.current.addControl(new maplibregl.NavigationControl(), 'top-right');
    
    // Add attribution
    map.current.addControl(new maplibregl.AttributionControl({
      customAttribution: 'Map data &copy; OpenStreetMap contributors'
    }));
    
    // Setup for prison-ej project
    if (projectId === 'prison-ej') {
      const setupPrisonMap = () => {
        if (!map.current) return;

        // Only add source if it doesn't exist
        if (!map.current.getSource("prisons")) {
          try {
            // Add polygon source
            map.current.addSource("prisons", {
              type: "geojson",
              data: mapConfig.geojsonPath,
              generateId: true
            });

            // Add points source
            map.current.addSource("centroids", {
              type: "geojson",
              data: mapConfig.pointsPath,
              generateId: true
            });

            // Add fill layer for polygons
            map.current.addLayer({
              id: "prison-polygons",
              type: "fill",
              source: "prisons",
              paint: {
                "fill-color": [
                  "interpolate",
                  ["linear"],
                  ["get", selectedAttribute],
                  0,
                  "#2ecc71",
                  50,
                  "#f1c40f",
                  100,
                  "#e74c3c"
                ],
                "fill-opacity": 0.5
              }
            });

            // Add outline layer
            map.current.addLayer({
              id: "prison-outlines",
              type: "line",
              source: "prisons",
              paint: {
                "line-color": "#ffffff",
                "line-width": 1
              }
            });

            // Add circle layer for points with the same color scale
            // Adding the points layer last ensures it appears on top
            map.current.addLayer({
              id: "prison-polygons-highlight",
              type: "fill",
              source: "prisons",
              paint: {
                "fill-color": [
                  "interpolate",
                  ["linear"],
                  ["get", selectedAttribute],
                  0,
                  "#2ecc71",
                  50,
                  "#f1c40f",
                  100,
                  "#e74c3c"
                ],
                "fill-opacity": 0.2
              },
              // This layer will only be visible at higher zoom levels
              minzoom: 6
            });
            
            // Add circle layer for points
            map.current.addLayer({
              id: "prison-centroids",
              type: "circle",
              source: "centroids",
              paint: {
                // Make circle radius larger to make the fade effect more obvious
                "circle-radius": [
                  "interpolate",
                  ["linear"],
                  ["zoom"],
                  3, 4,      // Smaller at lower zoom levels
                  10, 8,     // Medium at zoom level 10
                  14, 12     // Larger at higher zoom levels
                ],
                "circle-color": [
                  "interpolate",
                  ["linear"],
                  ["get", selectedAttribute],
                  0,
                  "#2ecc71",
                  50,
                  "#f1c40f",
                  100,
                  "#e74c3c"
                ],
                "circle-opacity": [
                  "interpolate",
                  ["linear"],
                  ["zoom"],
                  10, 1.0,   // Full opacity at zoom 10 and below
                  12, 0.6,   // 60% opacity at zoom 12
                  13, 0.3,   // 30% opacity at zoom 13
                  14, 0      // Completely transparent at zoom 14
                ],
                "circle-stroke-width": 0.4,  // Thicker stroke for better visibility
                "circle-stroke-color": "#000000",
                "circle-stroke-opacity": [
                  "interpolate",
                  ["linear"],
                  ["zoom"],
                  10, 1.0,   // Full opacity at zoom 10 and below
                  12, 0.6,   // 60% opacity at zoom 12
                  13, 0.3,   // 30% opacity at zoom 13
                  14, 0      // Completely transparent at zoom 14
                ],
              }
            });
            console.log("Centroid layer added successfully");

            // Set up initial popup handlers
            setupPrisonPopupHandlers();
            
            // Add a symbol layer to make points even more visible
            map.current.addLayer({
              id: "prison-symbol-layer",
              type: "symbol",
              source: "centroids",
              layout: {
                "icon-image": "circle-11",
                "icon-size": [
                  "interpolate",
                  ["linear"],
                  ["zoom"],
                  3, 0.8,
                  6, 1.2
                ],
                "icon-allow-overlap": true,
                "icon-ignore-placement": true
              },
              paint: {
                "icon-color": [
                  "interpolate",
                  ["linear"],
                  ["get", selectedAttribute],
                  0,
                  "#2ecc71",
                  50,
                  "#f1c40f",
                  100,
                  "#e74c3c"
                ],
                "icon-halo-width": 0.4,
                "icon-halo-color": "#000000"
              }
            });
          } catch (error) {
            console.error("Error adding prison map layers:", error);
          }
        }

        // Update the paint property for polygons
        map.current.setPaintProperty("prison-polygons", "fill-color", [
          "interpolate",
          ["linear"],
          ["get", selectedAttribute],
          0,
          "#2ecc71",
          50,
          "#f1c40f",
          100,
          "#e74c3c",
        ]);
        
        // Update the paint property for points
        map.current.setPaintProperty("prison-centroids", "circle-color", [
          "interpolate",
          ["linear"],
          ["get", selectedAttribute],
          0,
          "#2ecc71",
          50,
          "#f1c40f",
          100,
          "#e74c3c",
        ]);
        
        // Update the symbol layer color as well
        map.current.setPaintProperty("prison-symbol-layer", "icon-color", [
          "interpolate",
          ["linear"],
          ["get", selectedAttribute],
          0,
          "#2ecc71",
          50,
          "#f1c40f",
          100,
          "#e74c3c",
        ]);
      };

      // Wait for both map and style to load
      if (map.current.isStyleLoaded()) {
        setupPrisonMap();
      } else {
        map.current.on("load", setupPrisonMap);
      }
      
      // Add error event listener
      map.current.on('error', (e) => {
        console.error('Map error:', e);
      });
    }
    // For GSP projects, add the actual subbasin boundaries from GeoJSON files
    else if (projectId === 'cuyama-basin' || projectId === 'yuba-recharge') {
      map.current.on('load', () => {
        if (!map.current) return;
        const mapConfig = PROJECT_MAPS[projectId];
        
        // Create a popup for subbasin info
        popup.current = new maplibregl.Popup({
          closeButton: false,
          closeOnClick: false,
        });
        
        // Add the subbasin GeoJSON source
        map.current.addSource('subbasin-source', {
          type: 'geojson',
          data: mapConfig.geojsonPath
        });
        
        // Add fill layer for subbasins
        map.current.addLayer({
          id: 'subbasin-fill-layer',
          type: 'fill',
          source: 'subbasin-source',
          paint: {
            'fill-color': mapConfig.dataLayer.color,
            'fill-opacity': mapConfig.dataLayer.opacity,
            'fill-outline-color': mapConfig.dataLayer.outlineColor
          }
        });
        
        // Add outline layer
        map.current.addLayer({
          id: 'subbasin-outline-layer',
          type: 'line',
          source: 'subbasin-source',
          paint: {
            'line-color': mapConfig.dataLayer.outlineColor,
            'line-width': 1.5
          }
        });
        
        // Add popup on hover
        map.current.on('mouseenter', 'subbasin-fill-layer', (e) => {
          if (!map.current || !popup.current || !e.features?.[0]) return;
          
          const feature = e.features[0];
          const properties = feature.properties;
          const coordinates = e.lngLat;
          
          const description = `
            <strong>${properties.Basin_Subbasin_Name}</strong><br/>
            Basin Code: ${properties.Basin_Subbasin_Number}<br/>
            Area (acres): ${properties.Area_Acres}
          `;
          
          popup.current.setLngLat(coordinates).setHTML(description).addTo(map.current);
        });
        
        map.current.on('mouseleave', 'subbasin-fill-layer', () => {
          if (popup.current) popup.current.remove();
        });
        
        // Fit map to GeoJSON bounds
        map.current.once('idle', () => {
          if (!map.current) return;
          try {
            const bounds = new maplibregl.LngLatBounds();
            const source = map.current.getSource('subbasin-source');
            
            if (source && source.type === 'geojson') {
              // Use type assertion to access the data
              const data = (source as any).getData?.() || (source as any)._data;
              if (data.features && data.features.length > 0) {
                data.features.forEach((feature: any) => {
                  if (feature.geometry.type === 'Polygon') {
                    feature.geometry.coordinates[0].forEach((coord: [number, number]) => {
                      bounds.extend(coord);
                    });
                  } else if (feature.geometry.type === 'MultiPolygon') {
                    feature.geometry.coordinates.forEach((polygon: any) => {
                      polygon[0].forEach((coord: [number, number]) => {
                        bounds.extend(coord);
                      });
                    });
                  }
                });
                map.current.fitBounds(bounds, { padding: 50 });
              }
            }
          } catch (error) {
            console.error('Error fitting to bounds:', error);
          }
        });
      });
    }
    
    return () => {
      if (map.current) {
        map.current.remove();
        map.current = null;
      }
    };
  }, [projectId]);
  
  // Update prison map paint properties and popup handlers when selectedAttribute changes
  useEffect(() => {
    if (!map.current || !map.current.isStyleLoaded() || projectId !== 'prison-ej') return;

    const updatePrisonPaintProperty = () => {
      if (!map.current) return;

      // Update the color ramp for polygons
      map.current.setPaintProperty("prison-polygons", "fill-color", [
        "interpolate",
        ["linear"],
        ["get", selectedAttribute],
        0,
        "#2ecc71",
        50,
        "#f1c40f",
        100,
        "#e74c3c",
      ]);
      
      // Update the color ramp for points
      map.current.setPaintProperty("prison-centroids", "circle-color", [
        "interpolate",
        ["linear"],
        ["get", selectedAttribute],
        0,
        "#2ecc71",
        50,
        "#f1c40f",
        100,
        "#e74c3c",
      ]);
      
      // Update the symbol layer color as well
      map.current.setPaintProperty("prison-symbol-layer", "icon-color", [
        "interpolate",
        ["linear"],
        ["get", selectedAttribute],
        0,
        "#2ecc71",
        50,
        "#f1c40f",
        100,
        "#e74c3c",
      ]);

      // Update popup handlers
      setupPrisonPopupHandlers();
    };

    if (map.current.isStyleLoaded()) {
      updatePrisonPaintProperty();
    } else {
      map.current.on("load", updatePrisonPaintProperty);
      return () => {
        map.current?.off("load", updatePrisonPaintProperty);
      };
    }
  }, [selectedAttribute, projectId]);
  
  return (
    <div className="relative w-full h-full min-h-[300px] rounded-lg overflow-hidden">
      <div ref={mapContainer} className="w-full h-full" />
      
      {/* Legend for prison-ej project */}
      {projectId === 'prison-ej' && (
        <div className="absolute right-10 top-2.5 z-10 rounded-lg bg-white p-3 shadow-lg">
          {/* <h4 className="mb-2 text-forest-700">Risk Factors</h4> */}
          <select
            className="w-full rounded border p-1"
            value={selectedAttribute}
            onChange={(e) => setSelectedAttribute(e.target.value)}
          >
            <option value="fnl_rs_">Overall Risk Score</option>
            <option value="clmt_sc">Climate Risk</option>
            <option value="expsr_s">Exposure Risk</option>
            <option value="effcts_">Effects Risk</option>
          </select>
          <div className="mt-2">
            <div className="flex items-center justify-between text-sm">
              <span>Low Risk</span>
              <span>High Risk</span>
            </div>
            <div className="h-2 w-full rounded bg-gradient-to-r from-[#2ecc71] via-[#f1c40f] to-[#e74c3c]" />
          </div>
        </div>
      )}
    </div>
  );
};

export default ProjectMap;
